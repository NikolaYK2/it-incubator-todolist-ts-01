{"version":3,"sources":["components/button/Button.tsx","components/input/UniversalInput.tsx","components/fullInputButton/FullInput.tsx","components/editableSpan/EditableSpan.tsx","Todolist.tsx","components/buttonAppBar/ButtonAppBar.tsx","App.tsx","reportWebVitals.tsx","index.tsx","Todolist.module.css","components/button/Button.module.css","components/input/UniversalInput.module.css","components/editableSpan/EditableSpan.module.css"],"names":["Button","name","props","className","s","universalButton","onClick","callBack","style","button","UniversalInput","universalInput","TextField","size","variant","color","label","error","value","addTitle","onChange","event","setError","setAddTitle","currentTarget","onKeyDown","key","callback","maxWidth","modified","sx","input","backgroundColor","FullInput","useState","onClickHandlerAddTask","trim","addItem","errorStop","input__block","addTask","EditableSpan","editMode","setEditMode","switching","title","setTitle","e","onBlur","autoFocus","width","padding","text","onDoubleClick","Todolist","taskListItems","tasks","length","map","Task","id","isDone","activeTask","deleteTask","todoListID","onClickHandlerDelete","dellTask","Checkbox","checked","changeStatusHandler","icon","BookmarkBorder","checkedIcon","Bookmark","newValue","taskId","changeTaskTitle","onChangeHandlerTitle","tasksNull","changeTasksFilterHandler","filter","changeTasksFilter","changeStatus","buttonAll","active","default","buttonActive","buttonCompleted","onChangeHandlerTitleTodolist","IconButton","deleteTodolist","Delete","block","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","App","todolistID_1","v1","todolistID_2","todoLists","setTodoLists","setTasks","todolistID","tId","t","tl","todoId","todoListsID","todoListsComponents","filterTasks","Grid","item","Paper","boxShadow","Container","fixed","container","height","todolist","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","module","exports"],"mappings":"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","file":"static/js/main.447c3d54.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './Button.module.css';\r\nimport {IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\n type ButtonType = {\r\n    name?: string,\r\n    callBack: () => void,\r\n    style?: string | any,\r\n}\r\nexport const Button: React.FC<ButtonType> = ({name, ...props}) => {\r\n\r\n    const onclickHandler = () => {\r\n        props.callBack()\r\n    }\r\n    return (\r\n        <div className={s.universalButton}>\r\n            <button onClick={onclickHandler} className={`${props.style} ${s.button}`}>{name}</button>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport s from \"./UniversalInput.module.css\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\n\r\ntype UniversalInputType = {\r\n    setAddTitle: (addTitle: string) => void,\r\n    addTitle: string,\r\n    callback: () => void,\r\n    setError: (value: null) => void,\r\n    style: string,\r\n    error?: string | null,\r\n\r\n}\r\n\r\nexport const UniversalInput = (props: UniversalInputType) => {\r\n//добавления значений в инпут============================\r\n    const onChangeHandlerAddTask = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.setError(null)//Когда начинаем писать, ошибка пропадает / можно это прописать и в onKey\r\n        props.setAddTitle(event.currentTarget.value);\r\n\r\n    }\r\n    //Кнопка ввода ENter==================================================\r\n    const onKeyDownHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            props.callback()// функция добавления таски\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.universalInput}>\r\n            <TextField\r\n                size='small'\r\n                variant=\"filled\"\r\n                color='success'\r\n                label={props.error ? 'удали или заполни' : 'add title'}\r\n                error={!!props.error}\r\n                value={props.addTitle}\r\n                onChange={onChangeHandlerAddTask}\r\n                onKeyDown={onKeyDownHandler}\r\n                style={{maxWidth:'180px'}}\r\n                className={`${props.style} ${s.modified}`}\r\n                sx={{ input: { color: '#e0e0e0', backgroundColor:'rgba(110,106,106,0.6)'}}}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport {UniversalInput} from \"../input/UniversalInput\";\r\nimport s from \"../../Todolist.module.css\";\r\nimport {Button} from \"../button/Button\";\r\n\r\ntype FullInputType = {\r\n    addItem: (addTitle: string) => void,\r\n}\r\n\r\n\r\nexport const FullInput = (props: FullInputType) => {\r\n    //=======State Добавление таски======================================================\r\n    const [addTitle, setAddTitle] = useState<string>('')\r\n\r\n    const onClickHandlerAddTask = () => {\r\n        if (addTitle.trim() !== '') {//что-б и пробелы не считались за символы, убираем\r\n            props.addItem(addTitle.trim())//trim()- убираем пробелы вначале и конце\r\n            setAddTitle('')\r\n        } else {\r\n            setError('Заполни полe Чувак!')\r\n        }\r\n    }\r\n//=====================================================================================\r\n\r\n    //=====State Ошибка в случаи попытка отправки пустого поля========================\r\n    let [error, setError] = useState<string | null>(null)\r\n    const errorStop = error ? s.error : '';\r\n//===================================================================================================\r\n\r\n    //=======Добавление таски======================================================\r\n    // Кнопка ввода ENter==================================================\r\n    // const onKeyDownHandler =(event: KeyboardEvent<HTMLInputElement>)=>{\r\n    //     if(event.key === \"Enter\"){\r\n    //         onClickHandlerAddTask()\r\n    //     }\r\n    // }\r\n//=================================================================\r\n    return (\r\n            <>\r\n                {/*<input*/}\r\n                {/*    value={addTitle}*/}\r\n                {/*    onChange={onChangeHandlerAddTask}*/}\r\n                {/*    onKeyDown={onKeyDownHandler}*/}\r\n                {/*/>*/}\r\n                <div className={s.input__block}>\r\n                    <UniversalInput\r\n                        setAddTitle={setAddTitle}\r\n                        addTitle={addTitle}\r\n                        callback={onClickHandlerAddTask}\r\n                        setError={setError}\r\n                        style={errorStop}\r\n                        error={error}\r\n                    />\r\n                    <Button callBack={() => onClickHandlerAddTask()} style={s.addTask}/>\r\n                </div>\r\n                {/*{error && <div className={`${errorStop} ${s.block}`}>{error}</div>}*/}\r\n            </>\r\n    );\r\n};\r\n","import s from \"./EditableSpan.module.css\";\r\nimport React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n    title: string,\r\n    onChange: (newValue: string) => void,\r\n\r\n}\r\n//Делаем спан инпутом когданужно=========================================================\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n    //==Делаем управление не из вне, а state управление самой компонентой\r\n    //=====CONTROL EDITSPAN TASK=====================================================================\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    // const activateEditMode = () => {\r\n    //     setEditMode(true);\r\n    //     setTitle(props.title);\r\n    // }\r\n    // const activateViewMode = () => {\r\n    //     setEditMode(false);\r\n    //     props.onChange(title);\r\n    // }\r\n    //Сокращенный вариант=============\r\n    const switching = () => {\r\n        if (title !== '') {\r\n            setEditMode(!editMode);\r\n        }\r\n        props.onChange(title);\r\n    }\r\n//=============================================================================\r\n    //=====CONTROL VALUE=====================================================================\r\n\r\n    let [title, setTitle] = useState(props.title);//props.title cо старта будет то значение котрое приходит в пропсах\r\n    const onChangeHandlerValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    const onKeyDownHandlerValue = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            switching();\r\n        }\r\n    }\r\n\r\n    // ============================================================================\r\n    return (\r\n        editMode\r\n            ? /*<input className={s.text__input}\r\n                     value={title}\r\n                     onChange={onChangeHandlerValue}\r\n                     onBlur={switching}\r\n                     onKeyDown={onKeyDownHandlerValue}\r\n                     autoFocus/>*/\r\n            <TextField\r\n                label={title === '' ? 'add & dell' : ''}\r\n                error={!title}\r\n                value={title}\r\n                size='small'\r\n                variant='filled'\r\n                onChange={onChangeHandlerValue}\r\n                onBlur={switching}\r\n                onKeyDown={onKeyDownHandlerValue}\r\n                autoFocus\r\n                sx={{input:{color: '#f5f5f5', width: '100px', padding:'10px 0 0 0'}}}\r\n            />\r\n            : <span className={s.text} onDoubleClick={switching}>{title}</span>\r\n    );\r\n}","import React from \"react\";\r\nimport {Button} from \"./components/button/Button\";\r\nimport {filterValueType} from \"./App\";\r\nimport s from \"./Todolist.module.css\";\r\nimport {FullInput} from \"./components/fullInputButton/FullInput\";\r\nimport {EditableSpan} from \"./components/editableSpan/EditableSpan\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {Bookmark, BookmarkBorder, Delete} from \"@mui/icons-material\";\r\n\r\nexport type TasksPropsType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\nexport type TodolistPropsType = {\r\n    todoListID: string,\r\n    changeStatus: (taskId: string, isDone: boolean, id: string) => void,\r\n    title: string,\r\n    tasks: TasksPropsType[],\r\n    deleteTask: (id: string, idId: string,) => void,\r\n    deleteTodolist: (id: string) => void\r\n    addItem: (id: string, addTitle: string) => void\r\n    // changeTasksFilter: (filterValue: filterValueType) => void,//если параметр не передаем то пустая функция\r\n    changeTasksFilter: (id: string, filter: filterValueType,) => void\r\n    changeTaskTitle: (id: string, newValue: string, taskId: string,) => void,//редактирование title tasks\r\n    onChangeHandlerTitleTodolist: (todoId: string, newValue: string,) => void,//изм. title todolist\r\n    filter: filterValueType,\r\n    //void - ничиег оне возвращает\r\n}\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n    //================addTask===================================================\r\n    const addTask = (title: string) => {\r\n        props.addItem(title, props.todoListID);\r\n    }\r\n    // //Удаление таски==============================================================\r\n    const onClickHandlerDelete = (Task: string) => {\r\n        props.deleteTask(props.todoListID, Task,)\r\n    }\r\n    //====Редактирование в task title===============================================\r\n    const onChangeHandlerTitle = (taskId: string, newValue: string,) => {\r\n        props.changeTaskTitle(taskId, newValue, props.todoListID)\r\n        //props.todoListID что б знали наверху в каком тудулисте поменять\r\n    }\r\n\r\n    //========================================================================\r\n    // delete todolist=======================================\r\n    const onClickHandlerDeleteTodolist = () => {\r\n        props.deleteTodolist(props.todoListID);\r\n    }\r\n    //===============================================================\r\n\r\n    // =====================================================================\r\n    //Если лист тасок остался пустой\r\n    const taskListItems = props.tasks.length\r\n        ? props.tasks.map(Task => {//elTasks - элемент каждого обьекта в массиве\r\n            // //Удаление ==============================================================\r\n            // const onClickHandlerDelete=()=>{\r\n            //     props.deleteTask(elTask.id)\r\n            // }\r\n            // изменение в title========================================\r\n            // const onChangeHandlerTitle = (newValue: string) => {\r\n            //     props.changeTaskTitle(Task.id, newValue, props.todoListID)\r\n            //     //props.todoListID что б знали наверху в каком тудулисте поменять\r\n            // }\r\n            return (\r\n                <li key={Task.id} className={Task.isDone ? s.activeTask : ''}>\r\n                    {/*<button onClick={props.deleteTask}>x</button>/!*делаем ссылку на функцию, но не можем ничего передать на верх*!/*/}\r\n                    {/*<button onClick={()=>onClickHandlerDelete(elTask.id)}>x</button> можем передать на верх*/}\r\n                    <Button callBack={() => onClickHandlerDelete(Task.id)} style={s.dellTask}/>\r\n                    <Checkbox\r\n                        checked={Task.isDone}\r\n                        onChange={(event) => changeStatusHandler(Task.id, event.currentTarget.checked,)}\r\n                        icon={<BookmarkBorder/>}\r\n                        checkedIcon={<Bookmark/>}\r\n                        style={{color:'darkred'}}\r\n                    />\r\n                    {/*<input type=\"checkbox\" checked={Task.isDone}*/}\r\n                    {/*       onChange={(event) => changeStatusHandler(Task.id, event.currentTarget.checked,)}/>*/}\r\n                    <EditableSpan title={Task.title} onChange={(newValue) => onChangeHandlerTitle(Task.id, newValue)}/>\r\n                    {/*<span className={s.text}>{Task.title}</span>*/}\r\n                </li>\r\n            );\r\n        })\r\n        : <div className={s.tasksNull}>Task list is empty</div>;\r\n\r\n//===============================================================================\r\n//Фильтр ==================================================\r\n    const changeTasksFilterHandler = (filter: filterValueType,) => {\r\n        props.changeTasksFilter(props.todoListID, filter,);\r\n    }\r\n\r\n//===========Добавление таски==================================================\r\n    //=======State Добавление таски======================================================\r\n    // const [addTitle, setAddTitle] = useState<string>('')\r\n    //\r\n    // const onClickHandlerAddTask = () => {\r\n    //     if (addTitle.trim() !== '') {//что-б и пробелы не считались за символы, убираем\r\n    //         props.addTask(addTitle.trim(), props.todoListID)//trim()- убираем пробелы вначале и конце\r\n    //         setAddTitle('')\r\n    //     } else {\r\n    //         setError('Заполни полe Чувак!')\r\n    //     }\r\n    // }\r\n//===========================================================\r\n//============CHecked===============================\r\n    const changeStatusHandler = (taskId: string, filter: boolean,) => {\r\n        props.changeStatus(taskId, filter, props.todoListID)\r\n    }\r\n//=====State Ошибка в случаи попытка отправки пустого поля========================\r\n//     let [error, setError] = useState<string | null>(null)\r\n//     const errorStop = error ? s.error : '';\r\n//=====================================================================\r\n//=================Focus button filter===================================\r\n//filterValue - добавили фильтр из локального стейка\r\n    const buttonAll = props.filter === \"All\" ? s.active : s.default;\r\n    const buttonActive = props.filter === \"Active\" ? s.active : s.default;\r\n    const buttonCompleted = props.filter === \"Completed\" ? s.active : s.default;\r\n// =============================================================================\r\n    //Изм. todolist======================================================================================\r\n    const onChangeHandlerTitleTodolist = (newValue: string) => {\r\n        props.onChangeHandlerTitleTodolist(props.todoListID, newValue)\r\n    }\r\n    // ========================================================================================================\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={onChangeHandlerTitleTodolist}/></h3>\r\n            {/*<button className={s.todolistTitle} onClick={onClickHandlerDeleteTodolist}>x</button>*/}\r\n            <IconButton onClick={onClickHandlerDeleteTodolist} color={'error'}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <div className={s.block}>\r\n                <FullInput addItem={addTask}/>\r\n                {/*<UniversalInput setAddTitle={setAddTitle}*/}\r\n                {/*                addTitle={addTitle}*/}\r\n                {/*                callback={onClickHandlerAddTask}*/}\r\n                {/*                setError={setError}*/}\r\n                {/*                style={errorStop}/>*/}\r\n\r\n                {/*<Button name='+' callBack={() => onClickHandlerAddTask()}/>*/}\r\n                {/*{error && <div className={`${errorStop} ${s.block}`}>{error}</div>}*/}\r\n            </div>\r\n            {/*<div>*/}\r\n            {/*    <input*/}\r\n            {/*        value={addTitle}*/}\r\n            {/*        onChange={onChangeHandlerAddTask}*/}\r\n            {/*        onKeyDown={onKeyDownHandler}*/}\r\n            {/*    />*/}\r\n            {/*    <Button name='+' callBack={onClickHandlerAddTask}/>*/}\r\n            {/*    /!*<button onClick={onClickHandlerAddTask}>+</button>*!/*/}\r\n            {/*</div>*/}\r\n            <ul>\r\n                {taskListItems}\r\n                {/*//==========================================================================================*/}\r\n                {/*//================================================================================================*/}\r\n                {/*{props.tasks.map(elTask => {//elTasks - элемент каждого обьекта в массиве*/}\r\n                {/*    // //Удаление ==============================================================*/}\r\n                {/*    // const onClickHandlerDelete=()=>{*/}\r\n                {/*    //     props.deleteTask(elTask.id)*/}\r\n                {/*    // }*/}\r\n                {/*    return (*/}\r\n                {/*        <li key={elTask.id} className={elTask.isDone ? s.activeTask : ''}>*/}\r\n                {/*            /!*<button onClick={props.deleteTask}>x</button>/!*делаем ссылку на функцию, но не можем ничего передать на верх*!/*!/*/}\r\n                {/*            /!*<button onClick={()=>onClickHandlerDelete(elTask.id)}>x</button> можем передать на верх*!/*/}\r\n                {/*            <Button name='x' callBack={() => onClickHandlerDelete(elTask.id)}/>*/}\r\n                {/*            <label>*/}\r\n                {/*                <input type=\"checkbox\" checked={elTask.isDone}*/}\r\n                {/*                       onChange={(event) => changeStatus(elTask.id, event.currentTarget.checked)}/>*/}\r\n                {/*                /!*onChange={(event) => checkedTaskHandler(elTask.id, event.currentTarget.checked)}/>*!/*/}\r\n                {/*                <span className={s.text}>{elTask.title}</span>*/}\r\n                {/*            </label>*/}\r\n                {/*        </li>*/}\r\n                {/*    );*/}\r\n                {/*})}*/}\r\n            </ul>\r\n            <div>\r\n                <Button name='All' callBack={() => changeTasksFilterHandler(\"All\")} style={buttonAll}/>\r\n                <Button name='Active' callBack={() => changeTasksFilterHandler(\"Active\")} style={buttonActive}/>\r\n                <Button name='Completed' callBack={() => changeTasksFilterHandler(\"Completed\")} style={buttonCompleted}/>\r\n                {/*<button onClick={() => changeTasksFilter(\"All\")}>All</button>*/}\r\n                {/*<button onClick={() => changeTasksFilter(\"Active\")}>Active</button>*/}\r\n                {/*<button onClick={() => changeTasksFilter(\"Completed\")}>Completed</button>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport default function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\" style={{backgroundColor: 'brown'}}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {TasksPropsType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {FullInput} from \"./components/fullInputButton/FullInput\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {blue, grey} from \"@mui/material/colors\";\r\nimport ButtonAppBar from \"./components/buttonAppBar/ButtonAppBar\";\r\n\r\nexport type filterValueType = \"All\" | 'Active' | 'Completed';\r\n\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: filterValueType, //Список отсортированный для всех тудулистов\r\n}\r\ntype taskStateType = {\r\n    [todolistID: string]: TasksPropsType[];\r\n}\r\n\r\nfunction App() {\r\n    //todoLists - cписок тудулистов\r\n    const todolistID_1 = v1();\r\n    const todolistID_2 = v1();\r\n    const [todoLists, setTodoLists] = useState<TodolistType[]>([\r\n        {id: todolistID_1, title: 'What to learn', filter: 'All',},\r\n        {id: todolistID_2, title: 'What to buy', filter: 'All',},\r\n    ]);\r\n\r\n    const [tasks, setTasks] = useState<taskStateType>({//tasks переменная в которой лежат данные, в данном случаи обьекты\r\n        [todolistID_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: true},\r\n            {id: v1(), title: \"Next\", isDone: false},\r\n        ],\r\n        [todolistID_2]: [\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Meat\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: true},\r\n            {id: v1(), title: \"Drink\", isDone: false},\r\n        ],\r\n    })\r\n\r\n//=======Добавление таски=====================================================================================================\r\n    const addTask = (addTitle: string, todolistID: string) => {\r\n        // setTasks([{id: v1(), title: addTitle, isDone: false}, ...tasks,])\r\n//Acc. масс. =====================================================================\r\n//const todoListsTasks = tasks[todolistID];\r\n        // const updatedTasks = [{id: v1(), title: addTitle, isDone: false}, ...todoListsTasks];\r\n        // const copyTasks = {...tasks};\r\n        // copyTasks[todolistID] = updatedTasks;\r\n        // setTasks(copyTasks);\r\n        //Сокращенный вариант=================================================================\r\n        setTasks({...tasks, [todolistID]: [{id: v1(), title: addTitle, isDone: false}, ...tasks[todolistID]]})\r\n        //...tasks- раскрываем все такси и делаем копию,\r\n        // В объекте есть св-в[todolistID] в которое вносим изм.\r\n        // [todolistID]: [кладем сюда новый массив и все старые таски]Закидываем старые 4 таксик ...tasks[todolistID + одну новую {id: v1(), title: addTitle, isDone: false}\r\n    }\r\n//Удаление таски ===============================================================================================================\r\n    const deleteTask = (todolistID: string, tId: string,) => {\r\n        // tasks = tasks.filter((el) => el.id !== elId)\r\n        // setTasks(tasks.filter((el) => el.id !== elId));//для обычного массива методы\r\n        //Ассоциативный массив =======================================\r\n        // const todoListsTasks = tasks[todolistID];\r\n        // const updatedTasks = todoListsTasks.filter(el=>el.id !== elId)\r\n        // const copyTasks = {...tasks}\r\n        // copyTasks[todolistID] = updatedTasks\r\n        // setTasks(copyTasks);\r\n        //Сокращенный вариант ================================================\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== tId)})\r\n        //tasks[todolistID] не надо, так как мы уже в объекте после копии ...tasks, по этому просто [todolistID]\r\n    }\r\n// Передача наверх изм. title tasks=============================================================================\r\n    const changeTaskTitle = (taskId: string, newValue: string, todolistID: string) => {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, title: newValue} : t)})\r\n    }\r\n// ============================================================================\r\n\r\n// ========Добавление Todolist=============================================================\r\n    const addTodolist = (title: string) => {\r\n        let todolist: TodolistType = {id: v1(), title, filter: 'All',}\r\n        setTodoLists([todolist, ...todoLists])\r\n        setTasks({...tasks, [todolist.id]: []})\r\n    }\r\n    //=======Delete todolist========================================================================================================\r\n    const deleteTodolist = (todolistID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todolistID))\r\n        delete tasks[todolistID];// И нужно еще удалить объект с тасками, что бы мусора не было\r\n    }\r\n    //Изм. title todolist==========================================================================\r\n    const onChangeHandlerTitleTodolist = (todoId: string, newValue: string,) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoId ? {...tl, title: newValue} : tl));\r\n    }\r\n//====================================================================================================================================\r\n\r\n//========Checked find====================================================================================================\r\n//     const changeStatus = (taskId: string, isDone: boolean) => {\r\n//         let task = tasks.find((t) => t.id === taskId);//find - найди элемент массива t.id который равный true или false  и поменяй\r\n//         if(task) {\r\n//             task.isDone = isDone\r\n//         }\r\n//         setFilter([...tasks])\r\n//     }\r\n// ========Checked map========================================================================================================\r\n    const changeStatus = (taskId: string, isDone: boolean, todolistID: string) => {//отображения статуса таски true или false\r\n        //     let task = tasks.map((t) => t.id === taskId ? {...t, /*isDone: isDone - это*/ isDone} : t);\r\n        // }\r\n        //======Ассациативный ================\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, isDone} : t)})\r\n    }\r\n    // ==============================================================================================================================\r\n\r\n// =====================Фильтрация==================================================================================================\r\n    const changeTasksFilter = (todoListsID: string, filter: filterValueType,) => {\r\n        //     setFilterValue(filterValue);\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListsID ? {...tl, filter} : tl))\r\n        //map создает новый массив так что копию(...todolist) делать не надо\r\n    }\r\n//===============================================================================================\r\n\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        //=========================ФиЛЬТРАЦИЯ==============================\r\n        let filterTasks = tasks[tl.id];//[tl.id] - обращение к конкретному тудулисту, то есть его id\r\n        if (tl.filter === \"Active\") {\r\n            // filterTasks = tasks.filter((el) => el.isDone);\r\n            //Ассоциативный ===================================================\r\n            filterTasks = tasks[tl.id].filter(t => t.isDone);\r\n        }\r\n        if (tl.filter === \"Completed\") {\r\n            // filterTasks = tasks.filter(el => !el.isDone);\r\n            //Ассоциативный ===================================================\r\n            filterTasks = tasks[tl.id].filter(t => !t.isDone);\r\n        }\r\n        //==================================================================\r\n\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper style={{backgroundColor: \"rgba(0, 0, 0, 0.7)\", boxShadow: \"1px 1px 10px grey\", padding: '10px'}}>\r\n                    <Todolist\r\n                        todoListID={tl.id}\r\n                        title={tl.title}//Название проекта\r\n                        filter={tl.filter}\r\n                        tasks={filterTasks}\r\n\r\n                        changeStatus={changeStatus}\r\n                        deleteTask={deleteTask}\r\n                        deleteTodolist={deleteTodolist}\r\n                        addItem={addTask}\r\n                        changeTasksFilter={changeTasksFilter}\r\n                        changeTaskTitle={changeTaskTitle}//редактирование таски title\r\n                        onChangeHandlerTitleTodolist={onChangeHandlerTitleTodolist}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n//============================================================================================\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding:'10px', height: '70px'}}>\r\n                    <FullInput addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n                {/*<Todolist*/}\r\n                {/*    //id*/}\r\n                {/*    changeStatus={changeStatus}*/}\r\n                {/*    title={todoLists}//Название проекта*/}\r\n                {/*    tasks={filterTasks}*/}\r\n                {/*    deleteTask={deleteTask}*/}\r\n                {/*    addTask={addTask}*/}\r\n                {/*    setFilterValue={setFilterValue}*/}\r\n                {/*    checkedTask={checkedTask}*/}\r\n                {/*    filterValue={filterValue}*/}\r\n\r\n                {/*    // changeTasksFilter={changeTasksFilter}*/}\r\n                {/*/>*/}\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n    document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n    // <React.StrictMode>\r\n        <App/>\r\n    // </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistTitle__btn\":\"Todolist_todolistTitle__btn__3KX9f\",\"error\":\"Todolist_error__VZP88\",\"block\":\"Todolist_block__1PWwM\",\"active\":\"Todolist_active__3s2X0\",\"default\":\"Todolist_default__3ajGJ\",\"activeTask\":\"Todolist_activeTask__1R8sL\",\"tasksNull\":\"Todolist_tasksNull__2bP3M\",\"input__block\":\"Todolist_input__block__RJykX\",\"dellTask\":\"Todolist_dellTask__GG8oT\",\"addTask\":\"Todolist_addTask__OfYlM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"universalButton\":\"Button_universalButton__1cjHO\",\"button\":\"Button_button__3MIBb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"universalInput\":\"UniversalInput_universalInput__2KcYp\",\"sss\":\"UniversalInput_sss__2okGO\",\"modified\":\"UniversalInput_modified__2LRUw\",\"inputBorder\":\"UniversalInput_inputBorder__3LdP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text__input\":\"EditableSpan_text__input__3ES3f\",\"text\":\"EditableSpan_text__qqz8K\"};"],"sourceRoot":""}