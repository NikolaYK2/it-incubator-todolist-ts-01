{"version":3,"sources":["reportWebVitals.tsx","components/button/Button.tsx","components/input/UniversalInput.tsx","components/fullInputButton/FullInput.tsx","components/editableSpan/EditableSpan.tsx","reducers/tasksReducer.ts","reducers/todoListsReducer.tsx","components/task/Task.tsx","Todolist.tsx","components/buttonAppBar/ButtonAppBar.tsx","AppRedux.tsx","reducers/store.ts","index.tsx","Todolist.module.css","components/button/Button.module.css","components/input/UniversalInput.module.css","components/editableSpan/EditableSpan.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","name","props","className","s","universalButton","onClick","callBack","style","button","UniversalInput","React","memo","onChangeHandlerAddTask","useCallback","event","error","setError","setAddTitle","currentTarget","value","onKeyDownHandler","key","callback","universalInput","TextField","size","variant","color","label","addTitle","onChange","onKeyDown","maxWidth","modified","sx","input","backgroundColor","FullInput","useState","console","log","onClickHandlerAddTask","trim","addItem","errorStop","input__block","addTask","EditableSpan","editMode","setEditMode","title","setTitle","switching","onChangeHandlerValue","e","onKeyDownHandlerValue","onBlur","autoFocus","width","padding","text","onDoubleClick","initialState","Task","task","id","isDone","dispatch","useDispatch","changeStatusHandler","taskId","todolistID","type","payload","changeStatusAC","idTodolist","onClickHandlerDeleteTask","tId","onChangeHandlerTitle","newValue","changeTaskTitleAC","dellTask","Checkbox","checked","icon","BookmarkBorder","checkedIcon","Bookmark","Todolist","todolist","filter","tasks","useSelector","state","addTaskAC","onClickHandlerDeleteTodolist","deleteTodolistAC","filterTasks","t","taskListItems","length","map","activeTask","tasksNull","changeTasksFilterHandler","todoListsID","changeTasksFilterAC","buttonAll","active","default","buttonActive","buttonCompleted","onChangeHandlerTitleTodolist","todoId","onChangeTitleTodolistAC","IconButton","Delete","block","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","AppRedux","todoLists","addTodolist","v1","addTodolistAC","todoListsComponents","tl","Grid","item","Paper","boxShadow","Container","fixed","container","height","spacing","rootReducer","combineReducers","action","todo","todoFil","copyState","store","createStore","window","ReactDOM","createRoot","document","getElementById","render","module","exports"],"mappings":"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","file":"static/js/main.598992d1.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\n type ButtonType = {\r\n    name?: string,\r\n    callBack: () => void,\r\n    style?: string | any,\r\n}\r\nexport const Button: React.FC<ButtonType> = ({name, ...props}) => {\r\n\r\n    const onclickHandler = () => {\r\n        props.callBack()\r\n    }\r\n    return (\r\n        <div className={s.universalButton}>\r\n            <button onClick={onclickHandler} className={`${props.style} ${s.button}`}>{name}</button>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback} from 'react';\r\nimport s from \"./UniversalInput.module.css\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\n\r\ntype UniversalInputType = {\r\n    setAddTitle: (addTitle: string) => void,\r\n    addTitle: string,\r\n    callback: () => void,\r\n    setError: (value: null) => void,\r\n    style: string,\r\n    error?: string | null,\r\n\r\n}\r\n\r\nexport const UniversalInput = React.memo ((props: UniversalInputType) => {\r\n//добавления значений в инпут============================\r\n    const onChangeHandlerAddTask = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        if (props.error !== null){\r\n            props.setError(null)//Когда начинаем писать, ошибка пропадает / можно это прописать и в onKey\r\n        }\r\n        props.setAddTitle(event.currentTarget.value);\r\n    },[props]);\r\n\r\n    //Кнопка ввода ENter==================================================\r\n    const onKeyDownHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            props.callback()// функция добавления таски\r\n        }\r\n    },[props]);\r\n\r\n\r\n    return (\r\n        <div className={s.universalInput}>\r\n            <TextField\r\n                size='small'\r\n                variant=\"filled\"\r\n                color='success'\r\n                label={props.error ? 'удали или заполни' : 'add title'}\r\n                error={!!props.error}\r\n                value={props.addTitle}\r\n                onChange={onChangeHandlerAddTask}\r\n                onKeyDown={onKeyDownHandler}\r\n                style={{maxWidth:'180px'}}\r\n                className={`${props.style} ${s.modified}`}\r\n                sx={{ input: { color: '#e0e0e0', backgroundColor:'rgba(110,106,106,0.6)'}}}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport {UniversalInput} from \"../input/UniversalInput\";\r\nimport s from \"../../Todolist.module.css\";\r\nimport {Button} from \"../button/Button\";\r\n\r\ntype FullInputType = {\r\n    addItem: (addTitle: string) => void,\r\n}\r\n\r\n\r\nexport const FullInput = React.memo ((props: FullInputType) => {\r\n    //=======State Добавление таски======================================================\r\n    const [addTitle, setAddTitle] = useState<string>('')\r\n    console.log('add input')\r\n    const onClickHandlerAddTask = useCallback(() => {\r\n        if (addTitle.trim() !== '') {//что-б и пробелы не считались за символы, убираем\r\n            props.addItem(addTitle.trim())//trim()- убираем пробелы вначале и конце\r\n            setAddTitle('')\r\n        } else {\r\n            setError('Заполни полe Чувак!')\r\n        }\r\n    },[addTitle,props]);\r\n//=====================================================================================\r\n\r\n    //=====State Ошибка в случаи попытка отправки пустого поля========================\r\n    let [error, setError] = useState<string | null>(null)\r\n    const errorStop = error ? s.error : '';\r\n//===================================================================================================\r\n\r\n    //=======Добавление таски======================================================\r\n    // Кнопка ввода ENter==================================================\r\n    // const onKeyDownHandler =(event: KeyboardEvent<HTMLInputElement>)=>{\r\n    //     if(event.key === \"Enter\"){\r\n    //         onClickHandlerAddTask()\r\n    //     }\r\n    // }\r\n//=================================================================\r\n    return (\r\n            <>\r\n                {/*<input*/}\r\n                {/*    value={addTitle}*/}\r\n                {/*    onChange={onChangeHandlerAddTask}*/}\r\n                {/*    onKeyDown={onKeyDownHandler}*/}\r\n                {/*/>*/}\r\n                <div className={s.input__block}>\r\n                    <UniversalInput\r\n                        setAddTitle={setAddTitle}\r\n                        addTitle={addTitle}\r\n                        callback={onClickHandlerAddTask}\r\n                        setError={setError}\r\n                        style={errorStop}\r\n                        error={error}\r\n                    />\r\n                    <Button callBack={() => onClickHandlerAddTask()} style={s.addTask}/>\r\n                </div>\r\n                {/*{error && <div className={`${errorStop} ${s.block}`}>{error}</div>}*/}\r\n            </>\r\n    );\r\n});\r\n","import s from \"./EditableSpan.module.css\";\r\nimport React, {useState, KeyboardEvent, ChangeEvent, useCallback} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n    title: string,\r\n    onChange: (newValue: string) => void,\r\n\r\n}\r\n//Делаем спан инпутом когданужно=========================================================\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n    console.log('editblSpan');\r\n    //==Делаем управление не из вне, а state управление самой компонентой\r\n    //=====CONTROL EDITSPAN TASK=====================================================================\r\n    let [editMode, setEditMode] = useState(false);\r\n    //=====CONTROL VALUE=====================================================================\r\n    let [title, setTitle] = useState(props.title);//props.title cо старта будет то значение котрое приходит в пропсах\r\n\r\n    // const activateEditMode = () => {\r\n    //     setEditMode(true);\r\n    //     setTitle(props.title);\r\n    // }\r\n    // const activateViewMode = () => {\r\n    //     setEditMode(false);\r\n    //     props.onChange(title);\r\n    // }\r\n    //Сокращенный вариант=============\r\n    const switching = useCallback(() => {\r\n        if (title !== '') {\r\n            setEditMode(!editMode);\r\n        }\r\n        props.onChange(title);\r\n    },[props, title, editMode]);\r\n//=============================================================================\r\n    //=====CONTROL VALUE=====================================================================\r\n    const onChangeHandlerValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    },[]);\r\n    const onKeyDownHandlerValue = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            switching();\r\n        }\r\n    },[switching]);\r\n\r\n    // ============================================================================\r\n    return (\r\n        editMode\r\n            ? /*<input className={s.text__input}\r\n                     value={title}\r\n                     onChange={onChangeHandlerValue}\r\n                     onBlur={switching}\r\n                     onKeyDown={onKeyDownHandlerValue}\r\n                     autoFocus/>*/\r\n            <TextField\r\n                label={title === '' ? 'add & dell' : ''}\r\n                error={!title}\r\n                value={title}\r\n                size='small'\r\n                variant='filled'\r\n                onChange={onChangeHandlerValue}\r\n                onBlur={switching}\r\n                onKeyDown={onKeyDownHandlerValue}\r\n                autoFocus\r\n                sx={{input:{color: '#f5f5f5', width: '100px', padding:'10px 0 0 0'}}}\r\n            />\r\n            : <span className={s.text} onDoubleClick={switching}>{title}</span>\r\n    );\r\n});","import {v1} from \"uuid\";\r\nimport {AddTodolistACType, DeleteTodolistACType} from \"./todoListsReducer\";\r\n\r\nexport type TasksPropsType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\nexport type taskStateType = {\r\n    [todolistID: string]: TasksPropsType[];\r\n}\r\n\r\n\r\nconst initialState: taskStateType={\r\n    // [todolistID_1]: [\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     {id: v1(), title: \"ReactJS\", isDone: true},\r\n    //     {id: v1(), title: \"Next\", isDone: false},\r\n    // ],\r\n    // [todolistID_2]: [\r\n    //     {id: v1(), title: \"Beer\", isDone: true},\r\n    //     {id: v1(), title: \"Meat\", isDone: true},\r\n    //     {id: v1(), title: \"Fish\", isDone: true},\r\n    //     {id: v1(), title: \"Drink\", isDone: false},\r\n    // ],\r\n}\r\n\r\nexport const tasksReducer = (state: taskStateType = initialState, action: complexACType): taskStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK': {\r\n            //Сокращенный вариант=================================================================\r\n            // setTasks({...tasks, [todolistID]: [{id: v1(), title: addTitle, isDone: false}, ...tasks[todolistID]]})\r\n            //...tasks- раскрываем все такси и делаем копию,\r\n            // В объекте есть св-в[todolistID] в которое вносим изм.\r\n            // [todolistID]: [кладем сюда новый массив и все старые таски]Закидываем старые 4 таксик ...tasks[todolistID + одну новую {id: v1(), title: addTitle, isDone: false}\r\n            return {...state, [action.payload.todolistID]:[{id: v1(), title: action.payload.addTitle, isDone: false}, ...state[action.payload.todolistID]]};\r\n        }\r\n        case 'ADD-TODO': {\r\n            //Сокращенный вариант ================================================\r\n            // setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== tId)})\r\n            //tasks[todolistID] не надо, так как мы уже в объекте после копии ...tasks, по этому просто [todolistID]\r\n            // return {...state, [action.payload.todolistID]: []}\r\n            return {...state, [action.payload.todolistID]:[]};\r\n        }\r\n        case 'DELL-TASK': {\r\n            //Сокращенный вариант ================================================\r\n            // setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== tId)})\r\n            //tasks[todolistID] не надо, так как мы уже в объекте после копии ...tasks, по этому просто [todolistID]\r\n            return {...state, [action.payload.todolistID]: state[action.payload.todolistID].filter(task=>task.id !== action.payload.tId)}\r\n        }\r\n        case 'DELETE-TODO': {\r\n            // const {[action.payload.todolistID]:[], ...rest} = {...state}\r\n            // return rest;\r\n            let copyState = {...state}\r\n            delete copyState[action.payload.todolistID];\r\n            return copyState;\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            // setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, title: newValue} : t)});\r\n            return {...state, [action.payload.todolistID]: state[action.payload.todolistID].map(task=>task.id === action.payload.taskId ?\r\n                    {...task, title: action.payload.newValue} : task)}\r\n        }\r\n        case 'CHANGE-STATUS-TASK': {\r\n            // setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, title: newValue} : t)});\r\n            return {...state, [action.payload.todolistID]: state[action.payload.todolistID].map(task=>task.id === action.payload.taskId ?\r\n                    {...task, isDone: action.payload.isDone} : task)}\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\ntype complexACType = AddTaskACType\r\n/*| AddTaskTodoACType*/\r\n    | DeleteTaskACType\r\n    | ChangeTaskTitleACType\r\n    | ChangeStatusACACType\r\n/*| DeleteTaskTodoACType*/\r\n    | AddTodolistACType\r\n    | DeleteTodolistACType;//Используем action todolista\r\n\r\n\r\ntype AddTaskACType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (addTitle: string, todolistID: string) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            addTitle,\r\n            todolistID,\r\n        }\r\n    } as const;\r\n}\r\n\r\n// type AddTaskTodoACType = ReturnType<typeof addTaskTodoAC>\r\n// export const addTaskTodoAC = (todolistID: string) => {\r\n//     return {\r\n//         type: 'ADD-TASK-TODO',\r\n//         payload: {\r\n//             todolistID,\r\n//         }\r\n//     } as const;\r\n// }\r\n\r\ntype DeleteTaskACType = ReturnType<typeof deleteTaskAC>\r\nexport const deleteTaskAC = (todolistID: string, tId: string,) => {\r\n    return {\r\n        type: 'DELL-TASK',\r\n        payload: {\r\n            todolistID,\r\n            tId,\r\n        }\r\n    } as const;\r\n}\r\n\r\n// type DeleteTaskTodoACType = ReturnType<typeof deleteTaskTodoAC>\r\n// export const deleteTaskTodoAC = (todolistID: string) => {\r\n//     return {\r\n//         type: 'DELL-TASK-TODO',\r\n//         payload: {\r\n//             todolistID,\r\n//         }\r\n//     } as const;\r\n// }\r\n\r\ntype ChangeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (taskId: string, newValue: string, todolistID: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        payload: {\r\n            taskId,\r\n            newValue,\r\n            todolistID,\r\n        }\r\n    } as const;\r\n}\r\n\r\ntype ChangeStatusACACType = ReturnType<typeof changeStatusAC>\r\nexport const changeStatusAC = (taskId: string, isDone: boolean, todolistID: string) => {\r\n    return {\r\n        type: 'CHANGE-STATUS-TASK',\r\n        payload: {\r\n            taskId,\r\n            isDone,\r\n            todolistID,\r\n        }\r\n    } as const;\r\n}","\r\nexport type filterValueType = \"All\" | 'Active' | 'Completed';\r\n\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: filterValueType, //Список отсортированный для всех тудулистов\r\n}\r\n\r\n// export let todolistID_1 = v1();\r\n// export let todolistID_2 = v1();\r\n\r\nconst initialState: TodolistType[] = [//первым параметром принимаем редьюсер\r\n        // {id: todolistID_1, title: 'What to learn', filter: 'All'},\r\n        // {id: todolistID_2, title: 'What to buy', filter: 'All'},\r\n    ];\r\n\r\nexport const todoListsReducer = (state: TodolistType[] = initialState, action: complexTypeActions):TodolistType[] => {\r\n\r\n    if (action.type === 'ADD-TODO') {\r\n        // let todolist: TodolistType = {id: v1(), title: action.payload.title, filter: 'All'};\r\n        // setTodoLists([todolist, ...todoLists])\r\n        // setTasks({...tasks, [todolist.id]: []})\r\n        return [...state, {id: action.payload.todolistID, title: action.payload.title, filter: 'All'}];\r\n    } else if (action.type === 'DELETE-TODO') {\r\n        // setTodoLists(todoLists.filter(tl => tl.id !== todolistID))\r\n        // delete tasks[todolistID];// И нужно еще удалить объект с тасками, что бы мусора не было\r\n        return state.filter(todo => todo.id !== action.payload.todolistID)\r\n    } else if (action.type === 'CHANGE-TITLE-TODO') {\r\n        // setTodoLists(todoLists.map(tl => tl.id === todoId ? {...tl, title: newValue} : tl));\r\n        return state.map(todo => todo.id === action.payload.todoId ? {...todo, title: action.payload.newValue} : todo);\r\n    } else if (action.type === 'TASK-FILTER-TODO') {\r\n        //     setFilterValue(filterValue);\r\n        // setTodoLists(todoLists.map(tl => tl.id === todoListsID ? {...tl, filter} : tl))\r\n        //map создает новый массив так что копию(...todolist) делать не надо\r\n        return state.map(todoFil => todoFil.id === action.payload.todoListsID ? {...todoFil, filter: action.payload.filter} : todoFil);\r\n    }\r\n    return state;\r\n};\r\n\r\n\r\nexport type complexTypeActions =\r\n    AddTodolistACType |\r\n    DeleteTodolistACType |\r\n    OnChangeTitleTodolistACType |\r\n    ChangeTasksFilterACType;\r\n\r\n\r\nexport type AddTodolistACType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (title: string, todolistID:string) => {\r\n    return {\r\n        type: 'ADD-TODO',\r\n        payload: {\r\n            title,\r\n            todolistID,\r\n        }\r\n    } as const;\r\n\r\n}\r\n\r\nexport type DeleteTodolistACType = ReturnType<typeof deleteTodolistAC>\r\nexport const deleteTodolistAC = (todolistID: string) => {\r\n    return {\r\n        type: 'DELETE-TODO',\r\n        payload: {\r\n            todolistID,\r\n        }\r\n    } as const;\r\n}\r\n\r\ntype OnChangeTitleTodolistACType = ReturnType<typeof onChangeTitleTodolistAC>\r\nexport const onChangeTitleTodolistAC = (todoId: string, newValue: string,) => {\r\n    return {\r\n        type: 'CHANGE-TITLE-TODO',\r\n        payload: {\r\n            todoId,\r\n            newValue,\r\n        }\r\n    } as const;\r\n}\r\n\r\ntype ChangeTasksFilterACType = ReturnType<typeof changeTasksFilterAC>\r\nexport const changeTasksFilterAC = (todoListsID: string, filter: filterValueType,) => {\r\n    return {\r\n        type: 'TASK-FILTER-TODO',\r\n        payload: {\r\n            todoListsID,\r\n            filter,\r\n        }\r\n    } as const;\r\n}","import React, {useCallback} from 'react';\r\nimport {Checkbox} from \"@mui/material\";\r\nimport {Bookmark, BookmarkBorder} from \"@mui/icons-material\";\r\nimport {changeStatusAC, changeTaskTitleAC, deleteTaskAC, TasksPropsType} from \"../../reducers/tasksReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport s from \"../../Todolist.module.css\";\r\nimport {Button} from \"../button/Button\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\n\r\ntype  TaskType ={\r\n    task: TasksPropsType,\r\n    idTodolist: string\r\n}\r\nexport const Task = React.memo((props:TaskType) => {\r\n    const {id, isDone, title} = props.task\r\n    const dispatch = useDispatch();\r\n\r\n    //============CHecked===============================\r\n    const changeStatusHandler = useCallback((taskId: string, isDone: boolean,) => {\r\n        dispatch(changeStatusAC(taskId, isDone, props.idTodolist))\r\n        // props.changeStatus(taskId, filter, props.todoListID)\r\n    },[dispatch, props.idTodolist]);\r\n\r\n    // //Удаление таски==============================================================\r\n    const onClickHandlerDeleteTask = useCallback((Task: string) => {\r\n        // props.deleteTask(props.todoListID, Task,)\r\n        dispatch(deleteTaskAC(props.idTodolist, Task))\r\n    }, [dispatch, props.idTodolist]);\r\n\r\n    //====Редактирование в task title===============================================\r\n    const onChangeHandlerTitle = useCallback((taskId: string, newValue: string,) => {\r\n        // props.changeTaskTitle(taskId, newValue, props.todoListID)\r\n        //props.todoListID что б знали наверху в каком тудулисте поменять\r\n        dispatch(changeTaskTitleAC(taskId, newValue, props.idTodolist))\r\n\r\n    }, [dispatch, props.idTodolist]);\r\n\r\n    return (\r\n        <>\r\n                {/*<button onClick={props.deleteTask}>x</button>/!*делаем ссылку на функцию, но не можем ничего передать на верх*!/*/}\r\n                {/*<button onClick={()=>onClickHandlerDelete(elTask.id)}>x</button> можем передать на верх*/}\r\n                <Button callBack={() => onClickHandlerDeleteTask(id)} style={s.dellTask}/>\r\n                <Checkbox\r\n                    checked={isDone}\r\n                    onChange={(event) => changeStatusHandler(id, event.currentTarget.checked)}\r\n                    icon={<BookmarkBorder/>}\r\n                    checkedIcon={<Bookmark/>}\r\n                    style={{color: 'darkred'}}\r\n                />\r\n                {/*<input type=\"checkbox\" checked={Task.isDone}*/}\r\n                {/*       onChange={(event) => changeStatusHandler(Task.id, event.currentTarget.checked,)}/>*/}\r\n                <EditableSpan title={title} onChange={(newValue) => onChangeHandlerTitle(id, newValue)}/>\r\n                {/*<span className={s.text}>{Task.title}</span>*/}\r\n        </>\r\n    );\r\n});\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport {Button} from \"./components/button/Button\";\r\nimport s from \"./Todolist.module.css\";\r\nimport {FullInput} from \"./components/fullInputButton/FullInput\";\r\nimport {EditableSpan} from \"./components/editableSpan/EditableSpan\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./reducers/store\";\r\nimport {addTaskAC, TasksPropsType} from \"./reducers/tasksReducer\";\r\nimport {\r\n    changeTasksFilterAC,\r\n    deleteTodolistAC,\r\n    filterValueType,\r\n    onChangeTitleTodolistAC,\r\n    TodolistType\r\n} from \"./reducers/todoListsReducer\";\r\nimport {Task} from \"./components/task/Task\";\r\n\r\nexport type TodolistPropsType = {\r\n    todolist: TodolistType\r\n    // todoListID: string;\r\n    // title: string,\r\n    // // tasks: TasksPropsType[],\r\n    // // changeStatus: (taskId: string, isDone: boolean, id: string) => void,\r\n    // // deleteTask: (id: string, idId: string,) => void,\r\n    // // addItem: (id: string, addTitle: string) => void\r\n    // // changeTasksFilter: (filterValue: filterValueType) => void,//если параметр не передаем то пустая функция\r\n    // // changeTaskTitle: (id: string, newValue: string, taskId: string,) => void,//редактирование title tasks\r\n    // deleteTodolist: (id: string) => void\r\n    // // changeTasksFilter: (id: string, filter: filterValueType,) => void\r\n    // // onChangeHandlerTitleTodolist: (todoId: string, newValue: string,) => void,//изм. title todolist\r\n    // filter: filterValueType,\r\n    // //void - ничиег оне возвращает\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const {id, title, filter} = props.todolist\r\n    console.log('Todolist')\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector<AppRootState, TasksPropsType[]>((state) => state.tasks[id]);\r\n//=======Добавление таски=====================================================================================================\r\n//     const addTask = (addTitle: string, todolistID: string) => {\r\n// //         setTasks([{id: v1(), title: addTitle, isDone: false}, ...tasks,])\r\n// // Acc. масс. =====================================================================\r\n// // const todoListsTasks = tasks[todolistID];\r\n// //         const updatedTasks = [{id: v1(), title: addTitle, isDone: false}, ...todoListsTasks];\r\n// //         const copyTasks = {...tasks};\r\n// //         copyTasks[todolistID] = updatedTasks;\r\n// //         setTasks(copyTasks);\r\n// //         Сокращенный вариант=================================================================\r\n// //         setTasks({...tasks, [todolistID]: [{id: v1(), title: addTitle, isDone: false}, ...tasks[todolistID]]})\r\n// //         ...tasks- раскрываем все такси и делаем копию,\r\n// //         В объекте есть св-в[todolistID] в которое вносим изм.\r\n// //         [todolistID]: [кладем сюда новый массив и все старые таски]Закидываем старые 4 таксик ...tasks[todolistID + одну новую {id: v1(), title: addTitle, isDone: false}\r\n//         dispatch(addTaskAC(addTitle, todolistID))\r\n//     }\r\n//Удаление таски ===============================================================================================================\r\n//     const deleteTask = (todolistID: string, tId: string,) => {\r\n//         // tasks = tasks.filter((el) => el.id !== elId)\r\n//         // setTasks(tasks.filter((el) => el.id !== elId));//для обычного массива методы\r\n//         //Ассоциативный массив =======================================\r\n//         // const todoListsTasks = tasks[todolistID];\r\n//         // const updatedTasks = todoListsTasks.filter(el=>el.id !== elId)\r\n//         // const copyTasks = {...tasks}\r\n//         // copyTasks[todolistID] = updatedTasks\r\n//         // setTasks(copyTasks);\r\n//         //Сокращенный вариант ================================================\r\n//         // setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== tId)})\r\n//         //tasks[todolistID] не надо, так как мы уже в объекте после копии ...tasks, по этому просто [todolistID]\r\n//         dispatch(deleteTaskAC(todolistID, tId))\r\n//     }\r\n// Передача наверх изм. title tasks=============================================================================\r\n//     const changeTaskTitle = (taskId: string, newValue: string, todolistID: string) => {\r\n//         // setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, title: newValue} : t)});\r\n//         dispatch(changeTaskTitleAC(taskId, newValue, todolistID))\r\n//     }\r\n\r\n    //================addTask===================================================\r\n    const addTask = useCallback((addTitle: string) => {\r\n        dispatch(addTaskAC(addTitle, id))\r\n        // props.addItem(title, props.todoListID);\r\n    }, [dispatch, id]);\r\n    // // //Удаление таски==============================================================\r\n    // const onClickHandlerDeleteTask = useCallback((Task: string) => {\r\n    //     // props.deleteTask(props.todoListID, Task,)\r\n    //     dispatch(deleteTaskAC(id, Task))\r\n    // }, [dispatch, id]);\r\n\r\n    // //====Редактирование в task title===============================================\r\n    // const onChangeHandlerTitle = useCallback((taskId: string, newValue: string,) => {\r\n    //     // props.changeTaskTitle(taskId, newValue, props.todoListID)\r\n    //     //props.todoListID что б знали наверху в каком тудулисте поменять\r\n    //     dispatch(changeTaskTitleAC(taskId, newValue, id))\r\n    //\r\n    // }, [dispatch, id]);\r\n\r\n    //status task========================================================================\r\n    // const changeStatus = (taskId: string, isDone: boolean, todolistID: string) => {//отображения статуса таски true или false\r\n    //     //     let task = tasks.map((t) => t.id === taskId ? {...t, /*isDone: isDone - это*/ isDone} : t);\r\n    //     // }\r\n    //     //======Ассациативный ================\r\n    //     // setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, isDone} : t)})\r\n    //     dispatch(changeStatusAC(taskId, isDone, todolistID))\r\n    // }\r\n\r\n    // delete todolist=======================================\r\n    const onClickHandlerDeleteTodolist = useCallback((todolistID: string) => {\r\n        dispatch(deleteTodolistAC(todolistID))\r\n    }, [dispatch]);\r\n    //===============================================================\r\n    //=========================ФиЛЬТРАЦИЯ==============================\r\n    let filterTasks = tasks;//Создаем переменную тасок,и если фильтровать не нужно,\r\n    // она будет равна таскам которые пришли в пропсах,\r\n    //[tl.id] - обращение к конкретному тудулисту, то есть его id\r\n    if (filter === \"Active\") {\r\n        // filterTasks = tasks.filter((el) => el.isDone);\r\n        //Ассоциативный ===================================================\r\n        filterTasks = tasks.filter(t => t.isDone);\r\n    }\r\n    if (filter === \"Completed\") {\r\n        // filterTasks = tasks.filter(el => !el.isDone);\r\n        //Ассоциативный ===================================================\r\n        filterTasks = tasks.filter(t => !t.isDone);\r\n    }\r\n    //==================================================================\r\n\r\n    // =====================================================================\r\n    //Если лист тасок остался пустой\r\n    const taskListItems = tasks.length\r\n        ? filterTasks.map(task => {//elTasks - элемент каждого обьекта в массиве\r\n            // //Удаление ==============================================================\r\n            // const onClickHandlerDelete=()=>{\r\n            //     props.deleteTask(elTask.id)\r\n            // }\r\n            // изменение в title========================================\r\n            // const onChangeHandlerTitle = (newValue: string) => {\r\n            //     props.changeTaskTitle(Task.id, newValue, props.todoListID)\r\n            //     //props.todoListID что б знали наверху в каком тудулисте поменять\r\n            // }\r\n\r\n            return (\r\n                <li key={task.id} className={task.isDone ? s.activeTask : ''}>\r\n                    {/*<button onClick={props.deleteTask}>x</button>/!*делаем ссылку на функцию, но не можем ничего передать на верх*!/*/}\r\n                    {/*<button onClick={()=>onClickHandlerDelete(elTask.id)}>x</button> можем передать на верх*/}\r\n                    <Task task={task} idTodolist={id}/>\r\n                    {/*<Button callBack={() => onClickHandlerDeleteTask(task.id)} style={s.dellTask}/>*/}\r\n                    {/*<Checkbox*/}\r\n                    {/*    checked={task.isDone}*/}\r\n                    {/*    onChange={(event) => changeStatusHandler(task.id, event.currentTarget.checked,)}*/}\r\n                    {/*    icon={<BookmarkBorder/>}*/}\r\n                    {/*    checkedIcon={<Bookmark/>}*/}\r\n                    {/*    style={{color: 'darkred'}}*/}\r\n                    {/*/>*/}\r\n                    {/*/!*<input type=\"checkbox\" checked={Task.isDone}*!/*/}\r\n                    {/*/!*       onChange={(event) => changeStatusHandler(Task.id, event.currentTarget.checked,)}/>*!/*/}\r\n                    {/*<EditableSpan title={task.title} onChange={(newValue) => onChangeHandlerTitle(task.id, newValue)}/>*/}\r\n                    {/*<span className={s.text}>{Task.title}</span>*/}\r\n                </li>\r\n            );\r\n        })\r\n        : <div className={s.tasksNull}>Task list is empty</div>;\r\n\r\n//===============================================================================\r\n//Фильтр ==================================================\r\n    const changeTasksFilterHandler = useCallback((filter: filterValueType,) => {\r\n        dispatch(changeTasksFilterAC(id, filter,))\r\n        // props.changeTasksFilter(props.todoListID, filter,);\r\n    },[dispatch, id]);\r\n\r\n//===========Добавление таски==================================================\r\n    //=======State Добавление таски======================================================\r\n    // const [addTitle, setAddTitle] = useState<string>('')\r\n    //\r\n    // const onClickHandlerAddTask = () => {\r\n    //     if (addTitle.trim() !== '') {//что-б и пробелы не считались за символы, убираем\r\n    //         props.addTask(addTitle.trim(), props.todoListID)//trim()- убираем пробелы вначале и конце\r\n    //         setAddTitle('')\r\n    //     } else {\r\n    //         setError('Заполни полe Чувак!')\r\n    //     }\r\n    // }\r\n//===========================================================\r\n\r\n//============CHecked===============================\r\n//     const changeStatusHandler = useCallback((taskId: string, isDone: boolean,) => {\r\n//         dispatch(changeStatusAC(taskId, isDone, id))\r\n//         // props.changeStatus(taskId, filter, props.todoListID)\r\n//     },[dispatch, id]);\r\n//=====State Ошибка в случаи попытка отправки пустого поля========================\r\n//     let [error, setError] = useState<string | null>(null)\r\n//     const errorStop = error ? s.error : '';\r\n//=====================================================================\r\n\r\n//=================Focus button filter===================================\r\n//filterValue - добавили фильтр из локального стейка\r\n    const buttonAll = filter === \"All\" ? s.active : s.default;\r\n    const buttonActive = filter === \"Active\" ? s.active : s.default;\r\n    const buttonCompleted = filter === \"Completed\" ? s.active : s.default;\r\n// =============================================================================\r\n    //Изм. todolist======================================================================================\r\n    const onChangeHandlerTitleTodolist = useCallback((newValue: string) => {\r\n        dispatch(onChangeTitleTodolistAC(newValue, id))\r\n        // props.onChangeHandlerTitleTodolist(newValue, props.todoListID,)\r\n    },[dispatch, id]);\r\n    // ========================================================================================================\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={title} onChange={onChangeHandlerTitleTodolist}/></h3>\r\n            {/*<button className={s.todolistTitle} onClick={onClickHandlerDeleteTodolist}>x</button>*/}\r\n            <IconButton onClick={() => onClickHandlerDeleteTodolist(id)} color={'error'}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <div className={s.block}>\r\n                <FullInput addItem={addTask}/>\r\n                {/*<UniversalInput setAddTitle={setAddTitle}*/}\r\n                {/*                addTitle={addTitle}*/}\r\n                {/*                callback={onClickHandlerAddTask}*/}\r\n                {/*                setError={setError}*/}\r\n                {/*                style={errorStop}/>*/}\r\n\r\n                {/*<Button name='+' callBack={() => onClickHandlerAddTask()}/>*/}\r\n                {/*{error && <div className={`${errorStop} ${s.block}`}>{error}</div>}*/}\r\n            </div>\r\n            {/*<div>*/}\r\n            {/*    <input*/}\r\n            {/*        value={addTitle}*/}\r\n            {/*        onChange={onChangeHandlerAddTask}*/}\r\n            {/*        onKeyDown={onKeyDownHandler}*/}\r\n            {/*    />*/}\r\n            {/*    <Button name='+' callBack={onClickHandlerAddTask}/>*/}\r\n            {/*    /!*<button onClick={onClickHandlerAddTask}>+</button>*!/*/}\r\n            {/*</div>*/}\r\n            <ul>\r\n                {taskListItems}\r\n                {/*//==========================================================================================*/}\r\n                {/*//================================================================================================*/}\r\n                {/*{props.tasks.map(elTask => {//elTasks - элемент каждого обьекта в массиве*/}\r\n                {/*    // //Удаление ==============================================================*/}\r\n                {/*    // const onClickHandlerDelete=()=>{*/}\r\n                {/*    //     props.deleteTask(elTask.id)*/}\r\n                {/*    // }*/}\r\n                {/*    return (*/}\r\n                {/*        <li key={elTask.id} className={elTask.isDone ? s.activeTask : ''}>*/}\r\n                {/*            /!*<button onClick={props.deleteTask}>x</button>/!*делаем ссылку на функцию, но не можем ничего передать на верх*!/*!/*/}\r\n                {/*            /!*<button onClick={()=>onClickHandlerDelete(elTask.id)}>x</button> можем передать на верх*!/*/}\r\n                {/*            <Button name='x' callBack={() => onClickHandlerDelete(elTask.id)}/>*/}\r\n                {/*            <label>*/}\r\n                {/*                <input type=\"checkbox\" checked={elTask.isDone}*/}\r\n                {/*                       onChange={(event) => changeStatus(elTask.id, event.currentTarget.checked)}/>*/}\r\n                {/*                /!*onChange={(event) => checkedTaskHandler(elTask.id, event.currentTarget.checked)}/>*!/*/}\r\n                {/*                <span className={s.text}>{elTask.title}</span>*/}\r\n                {/*            </label>*/}\r\n                {/*        </li>*/}\r\n                {/*    );*/}\r\n                {/*})}*/}\r\n            </ul>\r\n            <div>\r\n                <Button name='All' callBack={() => changeTasksFilterHandler(\"All\")} style={buttonAll}/>\r\n                <Button name='Active' callBack={() => changeTasksFilterHandler(\"Active\")} style={buttonActive}/>\r\n                <Button name='Completed' callBack={() => changeTasksFilterHandler(\"Completed\")} style={buttonCompleted}/>\r\n                {/*<button onClick={() => changeTasksFilter(\"All\")}>All</button>*/}\r\n                {/*<button onClick={() => changeTasksFilter(\"Active\")}>Active</button>*/}\r\n                {/*<button onClick={() => changeTasksFilter(\"Completed\")}>Completed</button>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport default function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\" style={{backgroundColor: 'brown'}}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","import React, {useCallback} from \"react\";\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {FullInput} from \"./components/fullInputButton/FullInput\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\nimport ButtonAppBar from \"./components/buttonAppBar/ButtonAppBar\";\r\nimport {\r\n    addTodolistAC,\r\n    TodolistType,\r\n} from \"./reducers/todoListsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./reducers/store\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nfunction AppRedux() {\r\n    console.log('App')\r\n    const dispatch = useDispatch();\r\n    const todoLists = useSelector<AppRootState, TodolistType[]>((state)=>state.todoLists);\r\n//     const tasks = useSelector<AppRootState, taskStateType>((state)=>state.tasks);\r\n// //=======Добавление таски=====================================================================================================\r\n//     const addTask = (addTitle: string, todolistID: string) => {\r\n// //         setTasks([{id: v1(), title: addTitle, isDone: false}, ...tasks,])\r\n// // Acc. масс. =====================================================================\r\n// // const todoListsTasks = tasks[todolistID];\r\n// //         const updatedTasks = [{id: v1(), title: addTitle, isDone: false}, ...todoListsTasks];\r\n// //         const copyTasks = {...tasks};\r\n// //         copyTasks[todolistID] = updatedTasks;\r\n// //         setTasks(copyTasks);\r\n// //         Сокращенный вариант=================================================================\r\n// //         setTasks({...tasks, [todolistID]: [{id: v1(), title: addTitle, isDone: false}, ...tasks[todolistID]]})\r\n// //         ...tasks- раскрываем все такси и делаем копию,\r\n// //         В объекте есть св-в[todolistID] в которое вносим изм.\r\n// //         [todolistID]: [кладем сюда новый массив и все старые таски]Закидываем старые 4 таксик ...tasks[todolistID + одну новую {id: v1(), title: addTitle, isDone: false}\r\n//         dispatch(addTaskAC(addTitle, todolistID))\r\n//     }\r\n// //Удаление таски ===============================================================================================================\r\n//     const deleteTask = (todolistID: string, tId: string,) => {\r\n//         // tasks = tasks.filter((el) => el.id !== elId)\r\n//         // setTasks(tasks.filter((el) => el.id !== elId));//для обычного массива методы\r\n//         //Ассоциативный массив =======================================\r\n//         // const todoListsTasks = tasks[todolistID];\r\n//         // const updatedTasks = todoListsTasks.filter(el=>el.id !== elId)\r\n//         // const copyTasks = {...tasks}\r\n//         // copyTasks[todolistID] = updatedTasks\r\n//         // setTasks(copyTasks);\r\n//         //Сокращенный вариант ================================================\r\n//         // setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== tId)})\r\n//         //tasks[todolistID] не надо, так как мы уже в объекте после копии ...tasks, по этому просто [todolistID]\r\n//         dispatch(deleteTaskAC(todolistID, tId))\r\n//     }\r\n// // Передача наверх изм. title tasks=============================================================================\r\n//     const changeTaskTitle = (taskId: string, newValue: string, todolistID: string) => {\r\n//         // setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, title: newValue} : t)});\r\n//         dispatch(changeTaskTitleAC(taskId, newValue, todolistID))\r\n//     }\r\n// ============================================================================\r\n\r\n// ========Добавление Todolist=============================================================\r\n    const addTodolist = useCallback ((title: string) => {\r\n        // let todolist: TodolistType = {id: v1(), title, filter: 'All',}\r\n        // setTodoLists([todolist, ...todoLists])\r\n        // setTasks({...tasks, [todolist.id]: []})\r\n        // dispatch(addTodolistAC(title, todolistID));\r\n        const todolistID = v1();\r\n        dispatch(addTodolistAC(title, todolistID));\r\n    },[dispatch]);\r\n    //=======Delete todolist========================================================================================================\r\n    // const deleteTodolist = (todolistID: string) => {\r\n    //     // setTodoLists(todoLists.filter(tl => tl.id !== todolistID))\r\n    //     // delete tasks[todolistID];// И нужно еще удалить объект с тасками, что бы мусора не было\r\n    //     // dispatch(deleteTodolistAC(todolistID))\r\n    //     dispatch(deleteTodolistAC(todolistID))\r\n    // }\r\n    //Изм. title todolist==========================================================================\r\n\r\n    // const onChangeHandlerTitleTodolist = (todoId: string, newValue: string,) => {\r\n    //     // setTodoLists(todoLists.map(tl => tl.id === todoId ? {...tl, title: newValue} : tl));\r\n    //     dispatch(onChangeHandlerTitleTodolistAC(todoId, newValue))\r\n    // }\r\n//====================================================================================================================================\r\n\r\n//========Checked find====================================================================================================\r\n//     const changeStatus = (taskId: string, isDone: boolean) => {\r\n//         let task = tasks.find((t) => t.id === taskId);//find - найди элемент массива t.id который равный true или false  и поменяй\r\n//         if(task) {\r\n//             task.isDone = isDone\r\n//         }\r\n//         setFilter([...tasks])\r\n//     }\r\n// ========Checked map task========================================================================================================\r\n//     const changeStatus = (taskId: string, isDone: boolean, todolistID: string) => {//отображения статуса таски true или false\r\n//         //     let task = tasks.map((t) => t.id === taskId ? {...t, /*isDone: isDone - это*/ isDone} : t);\r\n//         // }\r\n//         //======Ассациативный ================\r\n//         // setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, isDone} : t)})\r\n//         dispatch(changeStatusAC(taskId, isDone, todolistID))\r\n//     }\r\n    // ==============================================================================================================================\r\n\r\n// =====================Фильтрация==================================================================================================\r\n//     const changeTasksFilter = (todoListsID: string, filter: filterValueType,) => {\r\n//         //     setFilterValue(filterValue);\r\n//         // setTodoLists(todoLists.map(tl => tl.id === todoListsID ? {...tl, filter} : tl))\r\n//         //map создает новый массив так что копию(...todolist) делать не надо\r\n//         dispatch(changeTasksFilterAC(todoListsID, filter))\r\n//     }\r\n//===============================================================================================\r\n\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        // //=========================ФиЛЬТРАЦИЯ==============================\r\n        // let filterTasks = tasks[tl.id];//[tl.id] - обращение к конкретному тудулисту, то есть его id\r\n        // if (tl.filter === \"Active\") {\r\n        //     // filterTasks = tasks.filter((el) => el.isDone);\r\n        //     //Ассоциативный ===================================================\r\n        //     filterTasks = tasks[tl.id].filter(t => t.isDone);\r\n        // }\r\n        // if (tl.filter === \"Completed\") {\r\n        //     // filterTasks = tasks.filter(el => !el.isDone);\r\n        //     //Ассоциативный ===================================================\r\n        //     filterTasks = tasks[tl.id].filter(t => !t.isDone);\r\n        // }\r\n        // //==================================================================\r\n\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper style={{backgroundColor: \"rgba(0, 0, 0, 0.7)\", boxShadow: \"1px 1px 10px grey\", padding: '10px'}}>\r\n                    <Todolist\r\n                        todolist={tl}\r\n                        // todoListID={tl.id}\r\n                        // title={tl.title}//Название проекта\r\n                        // filter={tl.filter}\r\n                        // tasks={filterTasks}\r\n\r\n                        // deleteTodolist={deleteTodolist}\r\n                        // changeTasksFilter={changeTasksFilter}\r\n                        // changeStatus={changeStatus}\r\n                        // deleteTask={deleteTask}\r\n                        // addItem={addTask}\r\n                        // changeTaskTitle={changeTaskTitle}//редактирование таски title\r\n                        // onChangeTitleTodolist={onChangeHandlerTitleTodolist}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n//============================================================================================\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px', height: '70px'}}>\r\n                    <FullInput addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n                {/*<Todolist*/}\r\n                {/*    //id*/}\r\n                {/*    changeStatus={changeStatus}*/}\r\n                {/*    title={todoLists}//Название проекта*/}\r\n                {/*    tasks={filterTasks}*/}\r\n                {/*    deleteTask={deleteTask}*/}\r\n                {/*    addTask={addTask}*/}\r\n                {/*    setFilterValue={setFilterValue}*/}\r\n                {/*    checkedTask={checkedTask}*/}\r\n                {/*    filterValue={filterValue}*/}\r\n\r\n                {/*    // changeTasksFilter={changeTasksFilter}*/}\r\n                {/*/>*/}\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AppRedux;\r\n","import {combineReducers, legacy_createStore as createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\nimport {todoListsReducer} from \"./todoListsReducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    })\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer);\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootState> = useSelector\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppRedux from \"./AppRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./reducers/store\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\r\nroot.render(\r\n    // <React.StrictMode>\r\n    //     <App/>\r\n    <Provider store={store}>\r\n        <AppRedux/>\r\n    </Provider>\r\n    // </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistTitle__btn\":\"Todolist_todolistTitle__btn__3KX9f\",\"error\":\"Todolist_error__VZP88\",\"block\":\"Todolist_block__1PWwM\",\"active\":\"Todolist_active__3s2X0\",\"default\":\"Todolist_default__3ajGJ\",\"activeTask\":\"Todolist_activeTask__1R8sL\",\"tasksNull\":\"Todolist_tasksNull__2bP3M\",\"input__block\":\"Todolist_input__block__RJykX\",\"dellTask\":\"Todolist_dellTask__GG8oT\",\"addTask\":\"Todolist_addTask__OfYlM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"universalButton\":\"Button_universalButton__1cjHO\",\"button\":\"Button_button__3MIBb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"universalInput\":\"UniversalInput_universalInput__2KcYp\",\"sss\":\"UniversalInput_sss__2okGO\",\"modified\":\"UniversalInput_modified__2LRUw\",\"inputBorder\":\"UniversalInput_inputBorder__3LdP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text__input\":\"EditableSpan_text__input__3ES3f\",\"text\":\"EditableSpan_text__qqz8K\"};"],"sourceRoot":""}